worker_processes  auto;
daemon off;

events {
    #Number of connections
    worker_connections  1024;
}

# RTMP context configuration
rtmp {
    server {
        listen 1935;
        chunk_size 4000;

        # This application recieves the stream from the agregator
        application live {
            live on;

            # This ffmpeg command transforms the input stream to 4 different bitrates.
			# The last line only copy/paste the original stream without transforming it.
            exec ffmpeg -i rtmp://localhost:1935/$app/$name -async 1 -vsync -1
                        -c:v libx264 -c:a libfdk_aac -b:v 256k -b:a 32k -vf "scale=480:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://localhost:1935/show/$name_low
                        -c:v libx264 -c:a libfdk_aac -b:v 768k -b:a 96k -vf "scale=720:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://localhost:1935/show/$name_mid
                        -c:v libx264 -c:a libfdk_aac -b:v 1024k -b:a 128k -vf "scale=960:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://localhost:1935/show/$name_high
                        -c:v libx264 -c:a libfdk_aac -b:v 1920k -b:a 128k -vf "scale=1280:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://localhost:1935/show/$name_hd720
                        -c copy -f flv rtmp://localhost:1935/show/$name_src;
        }

        # This application is for splitting the stream into HLS fragments
        application show {
            live on;
            hls on;

            hls_path /opt/data/hls;

			# Different options for the client, depending on the network specifications
            hls_variant _low BANDWIDTH=288000;
            hls_variant _mid BANDWIDTH=448000;
            hls_variant _high BANDWIDTH=1152000;
            hls_variant _hd720 BANDWIDTH=2048000;
            hls_variant _src BANDWIDTH=4096000;
        }
    }
}

http {
    # This commands optimize the delivery of large files with nginx
    sendfile off; # Mantain high throughput at high load
    tcp_nopush on; # Fills the TCP packet to its maximum size
    # aio on; # enables the use of aio
    directio 512; # Skips some steps in the kernel when reading files

    # This server, gives the video to the clients and put some stats
    server {
        listen 80;

        location /hls {
            types {
                application/vnd.apple.mpegurl m3u8;
            }

            root /opt/data;
            add_header Cache-Control no-cache; # Don't save the HLS fragments in cache
            add_header Access-Control-Allow-Origin *; # Gives the player access to the manifest
        }

		location /stat {
            rtmp_stat all;
            rtmp_stat_stylesheet static/stat.xsl;
        }
    }
}
